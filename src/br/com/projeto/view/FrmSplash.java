/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.projeto.view;

import br.com.projeto.dao.DataVencimentoDAO;
import br.com.projeto.jdbc.ConnectionFactory;
import java.awt.HeadlessException;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.commons.net.ntp.NTPUDPClient;
import org.apache.commons.net.ntp.NtpV3Packet;
import org.apache.commons.net.ntp.TimeInfo;
import javax.swing.ImageIcon;
import java.awt.Toolkit;

/**
 *
 * @author LUCAS
 */
public class FrmSplash extends javax.swing.JFrame {

    /**
     * Creates new form FrmSplash
     */
    DataVencimentoDAO ddao = new DataVencimentoDAO();

    public FrmSplash() {
        initComponents();
        this.con = new ConnectionFactory().getConnection();
    }

    public String getDataC() throws ParseException, UnknownHostException, IOException {
        String ata = "pool.ntp.org";
        NTPUDPClient timeClient = new NTPUDPClient();
        InetAddress inetAddress = InetAddress.getByName(ata);
        TimeInfo timeInfo = timeClient.getTime(inetAddress);
        NtpV3Packet message = timeInfo.getMessage();
        Date serverTime = message.getTransmitTimeStamp().getDate();
        //Date time = new Date(serverTime);
        //System.out.println("Time from " + TIME_SERVER + ": " + serverTime);
        String dado = serverTime.toString();
        String sdf3 = new SimpleDateFormat("dd/MM/yyyy").format(new SimpleDateFormat("EEE MMM dd HH:mm:ss z YYYY", Locale.ROOT).parse(serverTime.toString()));
        dado = new SimpleDateFormat("ddMMyyyy")
                .format(new SimpleDateFormat("EEE MMM d HH:mm:ss zzz yyyy", Locale.US)
                        .parse(dado));
        return dado;
    }

    private Connection con;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSplash = new javax.swing.JLabel();
        lblContagem = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().getImage("C:/Users/LUCAS/Documents/NetBeansProjects/Projeto Retifica/src/imagens/icon.png"));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblSplash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/splash.png"))); // NOI18N

        lblContagem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblContagem.setText("0%");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblSplash)
            .addGroup(layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(lblContagem))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblSplash)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblContagem))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Código para a tela de splash assim que a janela é carregada
        new Thread() {
            int i = 0;

            public void run() {
                while (i < 100) {
                    i += 10;
                    //Mostra o label carrega
                    lblContagem.setText(String.valueOf(i) + "%");
                    try {
                        sleep(1000);
                    } catch (Exception e) {
                    }
                }// Fechamento de while
                //Para fechar o form do splash
                FrmSplash.this.dispose();
                ddao.dataAbrir();
                checarData();
            }// Fechamento do método run
        }.start();
    }//GEN-LAST:event_formWindowOpened

    public String getLastData() {
        try {
            String sql = "SELECT * FROM `tb_data`";
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            if (rs.last()) {
                return rs.getString("data");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);

        }
        return null;
    }

    public String getAnteriorData() {
        try {
            String sql = "SELECT * FROM `tb_data`";
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            rs.last();
            if (rs.previous()) {
                return rs.getString("data");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return null;
    }

    public void checarData() {
        try {
            String sql = "SELECT * FROM `tb_vencimento` WHERE idVencimento='1'";
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            rs.first();
            if (rs.first()) {
                int op = 0;
                try {
                    if (getDataC().equals(getLastData())) {
                        isValidate();
                        estaVencido();
                        //System.out.println(DiferencaDatas(datefg,getLastData()));
                    } else {
                        JOptionPane.showMessageDialog(null, "A data do windows está alterada\nArrume a data e reinicie o sistema");
                        //System.out.println(DiferencaDatas(getNTPDate(), getLastData()) < 0);
                    }
                    //login.setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(FrmSplash.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FrmSplash.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                FrmCadastroDataVenc frm = new FrmCadastroDataVenc();
                frm.setVisible(true);
                JOptionPane.showMessageDialog(null, "O sistema está sendo aberto pela primeira vez,\n Por favor defina a data de vencimento do sistema.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro" + e);
        }
    }

    public void isValidate() {
        try {
            String sql = "SELECT * FROM `tb_vencimento` WHERE idVencimento=1";
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
            } else {
                JOptionPane.showMessageDialog(null, "Sistema inválido");
                JOptionPane.showMessageDialog(null, "Com a data ajustada\nAgora basta validar o sistema\nUsar a conta de Desenvolvedor");
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void estaVencido() {
        try {
            String sql = "SELECT * FROM `tb_vencimento`";
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            if (rs.last()) {
                DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                Date dataDoSistema = new Date();
                String dataAtual = dateFormat.format(dataDoSistema);
                String[] dataSeparada = dataAtual.split("-");
                int dataDia = Integer.parseInt(dataSeparada[0]);
                int dataMes = Integer.parseInt(dataSeparada[1]);
                int dataAno = Integer.parseInt(dataSeparada[2]);
                String dataBanco = rs.getString("dataVencimento");
                int dataBancoDia = Integer.parseInt(dataBanco.substring(0, 2));
                //System.out.println("data do banco de dados"+dataBancoDia);
                //System.out.println("data do sistema"+dataDia);
                int dataBancoMes = Integer.parseInt(dataBanco.substring(3, 4));
                //System.out.println("data do banco mes"+dataBancoMes);
                //System.out.println("data do sistema mes"+dataMes);
                int dataBancoAno = Integer.parseInt(dataBanco.substring(4, 8));
                //System.out.println("Data ano do bd"+dataBancoAno);
                //System.out.println("data ano do sistema"+dataAno);
                if (dataAno == dataBancoAno) {
                    if (dataMes >= dataBancoMes) {
                        if (dataDia >= dataBancoDia) {

                            JOptionPane.showMessageDialog(null, "Sistema Expirado,\nFavor renovar a licença!");
                            FrmValidaSis val = new FrmValidaSis();
                            val.setVisible(true);
                        } else {
                            DateFormat dateF = new SimpleDateFormat("ddMMyyyy");
                            Date dataSis = new Date();
                            String dataI = dateF.format(dataSis);
                            String dataF = rs.getString("dataVencimento");
                            JOptionPane.showMessageDialog(null, "Faltam " + DiferencaDatas(dataI, dataF) + " dias para o sistema expirar");
                            FrmLogin login = new FrmLogin();
                            login.setVisible(true);
                        }
                    } else {
                        DateFormat dateF = new SimpleDateFormat("ddMMyyyy");
                        Date dataSis = new Date();
                        String dataI = dateF.format(dataSis);
                        String dataF = rs.getString("dataVencimento");
                        JOptionPane.showMessageDialog(null, "Faltam " + DiferencaDatas(dataI, dataF) + " dias para o sistema expirar");
                        FrmLogin login = new FrmLogin();
                        login.setVisible(true);
                    }
                } else {
                }
            } else {
            }
        } catch (HeadlessException | NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro: " + e);
        }
    }

    public long DiferencaDatas(String dataInicial, String dataFinal) {
        Date data1 = new Date(), data2 = new Date();

        Calendar c1 = Calendar.getInstance();

        //Pega a primeira data
        c1.set(Integer.parseInt(dataInicial.substring(4, 8)), Integer.parseInt(dataInicial.substring(3, 4)), Integer.parseInt(dataInicial.substring(0, 2)));
        data1.setTime(c1.getTimeInMillis());

        //Pega a segunda data
        c1.set(Integer.parseInt(dataFinal.substring(4, 8)), Integer.parseInt(dataFinal.substring(3, 4)), Integer.parseInt(dataFinal.substring(0, 2)));
        data2.setTime(c1.getTimeInMillis());

        return (data2.getTime() - data1.getTime()) / 1000 / 60 / 60 / 24;
    }

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSplash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSplash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSplash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSplash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmSplash().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblContagem;
    private javax.swing.JLabel lblSplash;
    // End of variables declaration//GEN-END:variables

    private FrmLogin FrmLogin() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
